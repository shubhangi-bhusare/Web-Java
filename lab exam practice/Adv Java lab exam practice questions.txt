1. Develop a backend using Spring Boot , REST API , Spring Data JPA for student admission.

End points to develop
1. Launch new course
JSON request payload : course details (except course id)
eg : course title(unique) , start date , end date , fees , min score
This should add a record in the courses table.
Return suitable response.
(Hint : ApiRespone with string mesg is desirable. But even if you return a string mesg , it's also acceptable)
eg URL : http://host:port/courses, method=POST

2. Add student details
Json request payload : student details + course id
eg : first name , last name , email , course id,score obtained.
This should add a record in students table if the admission is granted(score based)  , with the foreign key of course_id set.
If the score is less , do not add a record.
Return suitable response.
(Hint : ApiRespone with string mesg is desirable. But even if you return a string mesg , it's also acceptable)
eg URL : http://host:port/students, method=POST

3. View all students , for a specific course
i/p : course title
Send the i/p using a path variable
eg URL for a course title , Mastering_Java
 : http://host:port/students/course_title/Mastering_Java 
method=GET

4. Update course fees
i/p : course id n updated fees.
eg URL : for a course id=10 n updated fees =25000
 http://host:port/courses/10/fees/25000
method=PUT

5. Cancel Student admission
i/p : course id n student id
eg URL : for a course id=10 n student id=20
 http://host:port/courses/10/students/20
method=DELETE

Develop this app in a layered manner
Rest Controller --Service --DAO --Entities --DB
--------------------------------------
2. Write a spring boot REST application which will provide Create & Get operations for Product resource.

Product has the following attributes: 
•	ID (unique identifier for each product, auto generated by JPA, starts from 1)
•	Name (should not be blank)
•	Product Code (Unique string for each product, should not be blank)
•	Date of manufacturing (should not be blank)
•	Category (should be an Enum, example: Fashion, Electronics)

•	You can use any relational database to save resource.
•	Resource created using Create endpoint should be retrieved using Get.
•	Response codes should be as per REST guidelines.(201 for resource creation , 404 for not found , 200 for ok)
•	Error handling in case of failures.
•	Add the logic to avoid duplicate resource creation. (Check if the resource exists before creating a new one)

-----------------------------------

3. Use Case: Movie review system
Description:
Develop RESTful services for a Movie revies  where a user add a review to the movie

Create User n Movie entities suitably

Review attributes  : like review ID(PK auto generated), review contents,rating,user id (FK) , movie id (FK)


Endpoints:
1.	Get all reviews
This should return a JSON containing : review id , review contents , rating
•	GET /reviews/{reviewId}
•	Request: Retrieve details of a specific review by providing its unique identifier.
•	Response: JSON representation of the review.
2.	Add a review
•	Endpoint: POST /reviews
•	Request: JSON payload(DTO)  containing review details (review contents,contents,user id, movie id)
•	Response: Confirmation of the created review .
3.	Update review:
•	Endpoint: PUT /reviews/{reviewId}
•	Request: Update an existing recipe by providing its unique identifier and the updated information.
•	Response: Confirmation of the updated recipe.
4.	Delete Recipe:
•	Endpoint: DELETE /reviews/{reviewId}
•	Request: Delete a review by providing its unique identifier.
•	Response: Confirmation of the deleted review.

Notes:
•	Response codes should be as per REST guidelines.
•	Error handling in case of failures.






