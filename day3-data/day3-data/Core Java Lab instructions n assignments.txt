Day 1
1. import day1.1 , in your workspace to revise exception handling

2. 
To revise inheritance , run time polymorphism m up casting , down casting n abstraction (using abstract class ) with array of references
Hands on 
Read complete assignment n then only solve.

2.1 Can you arrange Fruit,Apple,Orange,Mango in inheritance hierarchy ?
Use tight encapsulation.

2.2 Properties (instance variables)  : color : String , weight : double , name:String, fresh : boolean

2.3 Add suitable constructor

2.4 Override  toString correctly to return state of all fruits (return only  : name ,color , weight )

2.5 Add a taste() method : public String taste()

For Fruit : Can you identify taste of any general fruit ? NO
So add a taste() with this definition : returns "no specific taste" 
OR is there any BETTER solution ????

Apple : should return  "sweet n sour"
Mango : should return  "sweet"
Orange : should return  "sour"

2.6 Add specific functionality , in the sub classes
In Mango : public void pulp() {Display name n color of the fruit + a mesg  creating  pulp!}
In Orange : public void juice() {Display name n weight of the fruit + a mesg extracting juice!}
In Apple : public void jam() {Display name of the fruit + a mesg  making jam!}

2.7 Add all of above classes under the package "com.app.fruits"
2.8 Create java application FruitBasket , with main method , as a tester
2.9 Prompt user for the basket size n create suitable data structure

2.10 Supply options
1. Add Mango
2. Add Orange
3. Add Apple
NOTE : You will be ALWAYS adding a fresh fruit in the basket , in all of above options.

2. Display names of all fruits in the basket.

5. Display name,color,weight , taste of all fresh fruits , in the basket.


6. Mark a fruit in a basket , as stale(=not fresh)
i/p : index 
o/p : error message (in case of invalid index) or mark it stale

7. Mark all sour fruits stale 
Hint : Use equals() method of the String class.

8. Invoke fruit specific functionality (pulp / juice / jam)
i/p : index
Invoke correct functionality (pulp / juice / jam)

9. Exit 



Day2
1. import day2.1 
to revise 
1.1 try-with-resources
1.2 custom exceptions

2. import day2.2 
to revise 
2.1 strings (immutabilty , equality n literal vs non literal strings)

3. Complete pending work

4. Optional work (if you have completed earlier work)

Create java application , to revise enums , custom exception , validation rules n writing menu driven application.

Steps -

1.1 Create Vehicle class 
Add non static fields -- chasisNo (string) : Unique ID , color : enum Color(WHITE , SILVER , BLACK , RED , BLUE) , price , manufactureDate: Date , insuranceExpDate : Date  , pollutionLevel : double

1.2 Create suitable custom exception class or multiple classes.
(you decide !)

1.3 Create a separate class for Vehicle Validation rules

Validation rules
pollutionLevel < 20 %
color should be supported color (from within enum Color)

1.4 Create a Tester class , menu driven application  for the following options

1. Add new vehicle 
i/p : all vehicle details  (including chasis no)
(Since we have NOT completed Date time handling , you can skip that part !)
Iff color based  validation rule succeed , then only adding a vehicle  should be successful 
O.w --throw suitable custom exception n display error mesg via catch block.

2. Drive a vehicle
i/p -- Kilometers 
You can decide based upon Kms --the pollution level
If pollution level exceed , throw custom exception n display error message via catch block.


Day 3
In a combined lab session -
1. import day3.1 , to revise
1.1 Wrapper classes
1.2 Date time handling -legacy n modern 


2. import day3.2 to revise 
Banking case study
Understand the classes involved.

3. Hands on  In a combined lab 
 Complete n test validation rules 

3.1 min balance condition , while opening new account
(validate balance)
3.2 account type must be the supported type
(validate a/c type)
3.3  No two accounts can have same account no (i.e a/c nos can't be duplicate)

4. In individual labs , complete pending work.




