Today's Topics 

Revision of Enum in Java
Continuation of enums
var-args 
Continuation of Banking case study
Adding more validation rules 
Generics overview
Collection Framework overview.

Revise 
1. What is an enum ?
1.1 Why enums ?
1.2 What is the code generated by the javac ?
public enum AccountType {
	SAVING,CURRENT,FD,DMAT,LOAN;	
}
Generated code by javac -
static {
SAVING=new AccountType("SAVING",0);
.....
LOAN=new AccountType("LOAN",4);
}

Important methods added by javac
values
valueOf

1.3 Inherited methods ?
name(), ordinal() , compareTo, equals, toString....


2. Later !
Rules regarding Method overriding n exception handling
Refer - "Method overriding n exc handling.txt"
Rule - Overriding form of the method(sub class version) CAN NOT add any NEW OR BROADER CHECKED exceptions
otherwise : javac error !

examples : refer to readme

3.  var-args : variable no of args  , for any java method.
Refer - "day4-data\day4_help\readme_strings_date_varargs.txt"
Help :
PrintStream : method
public PrintStream printfâ€‹(String format, Object... args)
Use this method to print - id : int , name : string , salary : double (2 digits after decimal point)

eg : System.out.printf("Id %d Name %s Salary %.2f %n",id,name,salary);


4. Are there any disadvantages of the Legacy Date / Time API ?
4.1 java.util.Date : has limited no of ctors 
i.e for simple parsing n formatting , must use - SimpleDateFormat -parse n format
4.2 In case of invalid value of day/month -- API doesn't throw the exc
4.3 Date related classes are inherently thread un safe.

4.4 For practical requirement --prog had to use complex APIs.

Better alternative -
Th Java 8 Date time Handling API

4.5 Continue with the Banking case study
Add validation rule
2 Bank accounts can not have SAME(duplicate) a/c number .

How will you solve it ?
In Banking Validation Rules class
public static void checkForDup(int acctNo , BankAccount[] accts) throws ....
{
 for(BankAccount a : accts)
  if(a != null && a.equals(acctNo))
   throw ....;
 
}

Better option :
Override in BankAccount class : equals method
to replace ref equality by UID equality (acct no)
Object class's equals :
public boolean equals(Object o) 
rets true iff this n o is referring to the the SAME object.






5. Objective 
Create a class to hold an int value
Add ctor n getter
Create a class to hold a String
Add ctor n getter
Create a class to hold an Emp 
Add ctor n getter
How will you do it ?
Create separate classes : IntHolder , StringHolder....

NOT AT ALL ACCEPTABLE --since  so many classes will have to be created!
To add flexibility n avoid repetitions --Create single class 
eg : Holder --that can hold ANY data (primitive type as well as ref type)
add ctor n getter.
eg : public class Holder
{
   private Object ref;
//ctor n getter
}
Any problems noticed in non generic / raw / pre generic syntax
1. Any time you need to access the data from non generic type , explicit down casting is required.
2. In case of , invalid down casting  , javac DOES NOT detect the errors, JVM detects err . (ClassCastException)

The  solution to achieve the flexibility (i.e ANY type) as well as maintaining type safety @ compile time ? 
 Use - Generic syntax.
(It's meant for informing the javac --about actual data types, so that type mismatch errors are detected at the compile time)


6. Collection Framework overview
Refer - "day4-data\day4_help\generics n collections\Java Collection Framework.pdf"




